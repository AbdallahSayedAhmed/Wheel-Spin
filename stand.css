
.value-phrase span {
  display: inline-block; /* Allows transforms and padding to work correctly */
  padding: 0 0.05em;    /* Small spacing between letters, adjust as needed */
  cursor: pointer;      /* Pointer cursor for individual letters */

  /* Text color is managed by an animated background gradient clipped to the text */
  color: transparent; /* Hides the actual text color, making the background visible through the clip */
  -webkit-background-clip: text;
  background-clip: text;

  /*
    The gradient defines the two colors: forestgreen (target) and black (initial).
    It's twice the width of the letter to allow for a sliding effect.
  */
  background-image: linear-gradient(to right, forestgreen 50%, black 50%);
  background-size: 200% 100%;
  background-position: 100%;   /* Initially, the right half (black) of the gradient is visible */

  /*
    Transitions for smooth changes:
    - background-position: Handles the color change for the whole phrase and reversion.
    - transform: Handles the scaling effect for prominence.
  */
  transition: background-position 0.5s ease-in-out, transform 0.3s ease-in-out;
}

/* 1. When the entire phrase container is hovered */
.value-phrase:hover span {
  /* All letters in the phrase transition to green. */
  /* This is done by shifting the background gradient to reveal its green part. */
  background-position: 0%; /* Moves gradient to show the left half (green) */
}

/* 2. When an individual letter is hovered */
.value-phrase span:hover {
  transform: scale(1.25); /* Makes the hovered letter larger (prominent) */

  /*
    The LTR (Left-To-Right) color change animation for this specific letter.
    This animation overrides 'background-position' from the container's hover effect for this letter.
    'forwards' ensures the letter stays at the animation's end state (green) after it finishes,
    as long as the letter remains hovered.
  */
  animation: letterSwipeToGreenAnimation 0.4s forwards;

  /* Ensures the scaled letter appears on top if there's any overlap with neighbors */
  position: relative; /* Required for z-index to take effect */
  z-index: 1;
}

/* Keyframe animation for the individual letter's LTR color swipe */
@keyframes letterSwipeToGreenAnimation {
  0% {
    /*
      Start the swipe from the right end of the gradient (black side).
      This forces the letter to begin its color change from black (or its appearance),
      ensuring the LTR fill effect is clearly visible from left to right,
      even if the whole phrase was already turning green.
    */
    background-position: 100%;
  }
  100% {
    /*
      End the swipe with the left end of the gradient (green side) fully visible.
      The letter is now entirely green, filled from left to right.
    */
    background-position: 0%;
  }
}

/* Class for the space character, can be used for specific styling if desired */
.value-phrase span.space {
  padding: 0 0.2em; /* Example: Wider padding for the space character */
  /* If you don't want the space to animate or scale, you could add: */
  /* transform: none !important; */
  /* animation: none !important; */
  /* background-image: none !important; color: black !important; */
}
